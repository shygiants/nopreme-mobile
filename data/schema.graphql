type Query {
  viewer: Viewer
  admin: Admin

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Viewer implements Node {
  """The ID of an object"""
  id: ID!
  viewer: User!
  events(artistName: String!, after: String, first: Int, before: String, last: Int): EventConnection!
  event(eventId: ID!): Event!
  goodsCollection(artistName: String!, eventId: ID!, after: String, first: Int, before: String, last: Int): GoodsConnection!
  goods(goodsId: ID!): Goods!
  items(goodsId: ID!, after: String, first: Int, before: String, last: Int): ItemConnection!
  collection(goodsId: ID!): Collection!
  collections(after: String, first: Int, before: String, last: Int): CollectionConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  userId: ID!
  name: String!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge"""
  node: Event

  """A cursor for use in pagination"""
  cursor: String!
}

type Event implements Node {
  """The ID of an object"""
  id: ID!
  eventId: ID!
  img: Image
  name: String!
  date: String!
  type: String!
  numGoods(artistName: String!): Int
}

type Image implements Node {
  """The ID of an object"""
  id: ID!
  imageId: ID!
  src: String!
}

"""A connection to a list of items."""
type GoodsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoodsEdge]
}

"""An edge in a connection."""
type GoodsEdge {
  """The item at the end of the edge"""
  node: Goods

  """A cursor for use in pagination"""
  cursor: String!
}

type Goods implements Node {
  """The ID of an object"""
  id: ID!
  goodsId: ID!
  name: String!
  type: String!
  img: Image
  width: Int
  height: Int
  event: Event
  numItems: Int
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge"""
  node: Item

  """A cursor for use in pagination"""
  cursor: String!
}

type Item implements Node {
  """The ID of an object"""
  id: ID!
  itemId: ID!
  idx: Int!
  artist: [Artist]!
  img: Image
}

type Artist implements Node {
  """The ID of an object"""
  id: ID!
  artistId: ID!
  img: Image
  name: String!
  birthday: String!
}

type Collection implements Node {
  """The ID of an object"""
  id: ID!
  collecting: Boolean!
  goods: Goods!
  user: User!
  wishes(after: String, first: Int, before: String, last: Int): WishConnection!
  posessions(after: String, first: Int, before: String, last: Int): PosessionConnection!
}

"""A connection to a list of items."""
type WishConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WishEdge]
}

"""An edge in a connection."""
type WishEdge {
  """The item at the end of the edge"""
  node: Wish

  """A cursor for use in pagination"""
  cursor: String!
}

type Wish implements Node {
  """The ID of an object"""
  id: ID!
  item: Item!
  user: User!
  num: Int!
  fulfilled: Int!
}

"""A connection to a list of items."""
type PosessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PosessionEdge]
}

"""An edge in a connection."""
type PosessionEdge {
  """The item at the end of the edge"""
  node: Posession

  """A cursor for use in pagination"""
  cursor: String!
}

type Posession implements Node {
  """The ID of an object"""
  id: ID!
  item: Item!
  user: User!
  num: Int!
  wished: Int!
}

"""A connection to a list of items."""
type CollectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollectionEdge]
}

"""An edge in a connection."""
type CollectionEdge {
  """The item at the end of the edge"""
  node: Collection

  """A cursor for use in pagination"""
  cursor: String!
}

type Admin implements Node {
  """The ID of an object"""
  id: ID!
  user: User!
  groups(after: String, first: Int, before: String, last: Int): ArtistConnection!
  artists(groupId: ID, goodsId: ID, after: String, first: Int, before: String, last: Int): ArtistConnection!
  events(artistId: ID!, after: String, first: Int, before: String, last: Int): EventConnection!
  goodsCollection(artistId: ID!, eventId: ID!, after: String, first: Int, before: String, last: Int): GoodsConnection!
  items(goodsId: ID!, after: String, first: Int, before: String, last: Int): ItemConnection!
}

"""A connection to a list of items."""
type ArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtistEdge]
}

"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge"""
  node: Artist

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  addGroup(input: AddGroupInput!): AddGroupPayload
  modifyGroup(input: ModifyGroupInput!): ModifyGroupPayload
  removeGroup(input: RemoveGroupInput!): RemoveGroupPayload
  addArtist(input: AddArtistInput!): AddArtistPayload
  modifyArtist(input: ModifyArtistInput!): ModifyArtistPayload
  removeArtist(input: RemoveArtistInput!): RemoveArtistPayload
  addEvent(input: AddEventInput!): AddEventPayload
  modifyEvent(input: ModifyEventInput!): ModifyEventPayload
  removeEvent(input: RemoveEventInput!): RemoveEventPayload
  addGoods(input: AddGoodsInput!): AddGoodsPayload
  modifyGoods(input: ModifyGoodsInput!): ModifyGoodsPayload
  removeGoods(input: RemoveGoodsInput!): RemoveGoodsPayload
  addItem(input: AddItemInput!): AddItemPayload
  modifyItem(input: ModifyItemInput!): ModifyItemPayload
  removeItem(input: RemoveItemInput!): RemoveItemPayload
  addCollection(input: AddCollectionInput!): AddCollectionPayload
  updateCollection(input: UpdateCollectionInput!): UpdateCollectionPayload
}

type AddGroupPayload {
  groupEdge: ArtistEdge!
  clientMutationId: String
}

input AddGroupInput {
  name: String!
  birthday: String!
  img: ID
  clientMutationId: String
}

type ModifyGroupPayload {
  groupEdge: ArtistEdge!
  clientMutationId: String
}

input ModifyGroupInput {
  groupId: ID!
  name: String
  birthday: String
  img: ID
  clientMutationId: String
}

type RemoveGroupPayload {
  removedGroupId: ID!
  clientMutationId: String
}

input RemoveGroupInput {
  groupId: ID!
  clientMutationId: String
}

type AddArtistPayload {
  artistEdge: ArtistEdge!
  clientMutationId: String
}

input AddArtistInput {
  groupId: ID!
  name: String!
  birthday: String!
  img: ID
  clientMutationId: String
}

type ModifyArtistPayload {
  artistEdge: ArtistEdge!
  clientMutationId: String
}

input ModifyArtistInput {
  artistId: ID!
  name: String
  birthday: String
  img: ID
  clientMutationId: String
}

type RemoveArtistPayload {
  removedArtistId: ID!
  clientMutationId: String
}

input RemoveArtistInput {
  artistId: ID!
  clientMutationId: String
}

type AddEventPayload {
  eventEdge: EventEdge!
  clientMutationId: String
}

input AddEventInput {
  artistId: ID!
  name: String!
  date: String!
  type: String!
  img: ID
  clientMutationId: String
}

type ModifyEventPayload {
  eventEdge: EventEdge!
  clientMutationId: String
}

input ModifyEventInput {
  eventId: ID!
  name: String
  date: String
  type: String
  img: ID
  clientMutationId: String
}

type RemoveEventPayload {
  removedEventId: ID!
  clientMutationId: String
}

input RemoveEventInput {
  eventId: ID!
  clientMutationId: String
}

type AddGoodsPayload {
  goodsEdge: GoodsEdge!
  clientMutationId: String
}

input AddGoodsInput {
  artistId: ID!
  eventId: ID!
  name: String!
  type: String!
  img: ID
  width: Int
  height: Int
  clientMutationId: String
}

type ModifyGoodsPayload {
  goodsEdge: GoodsEdge!
  clientMutationId: String
}

input ModifyGoodsInput {
  goodsId: ID!
  name: String
  type: String
  img: ID
  width: Int
  height: Int
  clientMutationId: String
}

type RemoveGoodsPayload {
  removedGoodsId: ID!
  clientMutationId: String
}

input RemoveGoodsInput {
  goodsId: ID!
  clientMutationId: String
}

type AddItemPayload {
  itemEdge: ItemEdge!
  clientMutationId: String
}

input AddItemInput {
  goodsId: ID!
  artistId: ID!
  idx: Int!
  img: ID
  clientMutationId: String
}

type ModifyItemPayload {
  itemEdge: ItemEdge!
  clientMutationId: String
}

input ModifyItemInput {
  itemId: ID!
  artistId: ID
  idx: Int
  img: ID
  clientMutationId: String
}

type RemoveItemPayload {
  removedItemId: ID!
  clientMutationId: String
}

input RemoveItemInput {
  itemId: ID!
  clientMutationId: String
}

type AddCollectionPayload {
  collectionEdge: CollectionEdge!
  clientMutationId: String
}

input AddCollectionInput {
  goodsId: ID!
  wishes: [ItemPick]!
  posessions: [ItemPick]!
  clientMutationId: String
}

input ItemPick {
  itemId: ID!
  num: Int!
}

type UpdateCollectionPayload {
  collectionEdge: CollectionEdge!
  clientMutationId: String
}

input UpdateCollectionInput {
  goodsId: ID!
  wishes: [ItemPick]!
  posessions: [ItemPick]!
  clientMutationId: String
}
